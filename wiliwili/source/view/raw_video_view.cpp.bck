//
// Created by fang on 2022/7/17.
//

#include "view/raw_video_view.hpp"

RawVideoView::RawVideoView() {
    brls::Logger::debug("View RawVideoView: create");

    brls::Logger::error("avcodec_configuration: {}", avcodec_configuration());
    brls::Logger::error("avcodec_version: {}", avcodec_version());

    this->InitVideo();

    brls::async([this]() { playVideo("http://vjs.zencdn.net/v/oceans.mp4"); });
}

RawVideoView::~RawVideoView() {
    brls::Logger::debug("View RawVideoViewActivity: delete");
    mVideoPlaySta = VIDEO_STOPPED;
    this->mtx.unlock();

    this->FreeVideo();

    if (image) {
        nvgDeleteImage(brls::Application::getNVGContext(), image);
        image = 0;
    }
}

brls::View *RawVideoView::create() { return new RawVideoView(); }

int RawVideoView::playVideo(std::string path) {
    unsigned char *buf;
    int isVideo = -1;
    int ret, gotPicture;
    unsigned int i, streamIndex = 0;
    AVPacket *pAVpkt;
    AVFormatContext *pFormatCtx;

    //创建AVFormatContext
    pFormatCtx = avformat_alloc_context();

    //初始化pFormatCtx
    if (avformat_open_input(&pFormatCtx, path.c_str(), NULL, NULL) != 0) {
        brls::Logger::error("avformat_open_input err.");
        return -1;
    }

    //获取音视频流数据信息
    if (avformat_find_stream_info(pFormatCtx, NULL) < 0) {
        avformat_close_input(&pFormatCtx);
        brls::Logger::error("avformat_find_stream_info err.");
        return -2;
    }

    //找到视频流的索引
    for (i = 0; i < pFormatCtx->nb_streams; i++) {
        if (pFormatCtx->streams[i]->codecpar->codec_type ==
            AVMEDIA_TYPE_VIDEO) {
            streamIndex = i;
            isVideo     = 0;
            break;
        }
    }

    //没有视频流就退出
    if (isVideo == -1) {
        avformat_close_input(&pFormatCtx);
        brls::Logger::error("nb_streams err.");
        return -3;
    }

    //获取视频流编码
    codec_context = avcodec_alloc_context3(NULL);
    ;

    //查找解码器
    avcodec_parameters_to_context(codec_context,
                                  pFormatCtx->streams[streamIndex]->codecpar);
    codec = avcodec_find_decoder(codec_context->codec_id);
    if (codec == NULL) {
        avcodec_close(codec_context);
        avformat_close_input(&pFormatCtx);
        brls::Logger::error("avcodec_find_decoder err.");
        return -4;
    }

    //初始化codec_context
    if (avcodec_open2(codec_context, codec, NULL) < 0) {
        avcodec_close(codec_context);
        avformat_close_input(&pFormatCtx);
        brls::Logger::error("avcodec_open2 err.");
        return -5;
    }

    //初始化pAVpkt
    pAVpkt = (AVPacket *)av_malloc(sizeof(AVPacket));

    //创建图像数据存储buf
    //av_image_get_buffer_size一帧大小
    buf = (unsigned char *)av_malloc(av_image_get_buffer_size(
        AV_PIX_FMT_RGB32, codec_context->width, codec_context->height, 1));
    av_image_fill_arrays(this->frame->data, this->frame->linesize, buf,
                         AV_PIX_FMT_RGB32, codec_context->width,
                         codec_context->height, 1);

    //初始化pSwsCtx
    pSwsCtx = sws_getContext(codec_context->width, codec_context->height,
                             codec_context->pix_fmt, codec_context->width,
                             codec_context->height, AV_PIX_FMT_RGB32,
                             SWS_BICUBIC, NULL, NULL, NULL);

    //循环读取视频数据
    for (;;) {
        if (mVideoPlaySta == VIDEO_PLAYING)  //正在播放
        {
            if (av_read_frame(pFormatCtx, pAVpkt) >= 0)  //读取一帧未解码的数据
            {
                //如果是视频数据
                if (pAVpkt->stream_index == (int)streamIndex)
                    this->VideoCB(pAVpkt->data, pAVpkt->size);

                av_packet_unref(pAVpkt);
            } else {
                break;
            }
        } else if (mVideoPlaySta == VIDEO_STOPPED)  //播放结束
        {
            break;
        } else  //暂停
        {
            std::this_thread::sleep_for(std::chrono::microseconds(33));
        }
    }

    //释放资源
    sws_freeContext(pSwsCtx);
    this->pSwsCtx = nullptr;
    avcodec_close(codec_context);
    avformat_close_input(&pFormatCtx);

    mVideoPlaySta = VIDEO_STOPPED;
    brls::Logger::error("play finish!");

    return 0;
}

void RawVideoView::draw(NVGcontext *vg, float x, float y, float width,
                        float height, brls::Style style,
                        brls::FrameContext *ctx) {
    Box::draw(vg, x, y, width, height, style, ctx);

    if (!*frame->data) return;

    this->mtx.lock();

    if (!image)
        image = nvgCreateImageRGBA(brls::Application::getNVGContext(),
                                   codec_context->width, codec_context->height,
                                   0, *frame->data);
    else
        nvgUpdateImage(brls::Application::getNVGContext(), image, *frame->data);
    this->mtx.unlock();

    auto imgPaint = nvgImagePattern(vg, x, y, (int)width, (int)height, 0,
                                    this->image, this->alpha);
    nvgBeginPath(vg);
    nvgRect(vg, x, y, width, height);
    nvgFillPaint(vg, a(imgPaint));
    nvgFill(vg);
}
